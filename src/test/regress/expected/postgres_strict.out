SET postgres_strict.disable = 'none';
--
-- require_column_as
--
SELECT 1 AS a;
 a 
---
 1
(1 row)

SELECT 1 a;
ERROR:  AS omitted for column alias
LINE 1: SELECT 1 a;
                 ^
SELECT 1a;
ERROR:  AS omitted for column alias
LINE 1: SELECT 1a;
                ^
DO $$
DECLARE
_r record;
BEGIN
SELECT 1 a INTO _r;
END $$;
ERROR:  AS omitted for column alias
LINE 5: SELECT 1 a INTO _r;
                 ^
DO $$
BEGIN
RAISE NOTICE '%', 1 a;
END $$;
ERROR:  AS omitted for column alias
LINE 3: RAISE NOTICE '%', 1 a;
                            ^
--
-- randomize_values_order
--
-- It's hard to ensure that the values are in a random order, so we just
-- execute a couple of queries and make sure the backend doesn't crash or throw
-- any weird errors.
--
SELECT count(*) FROM (VALUES (1)) ss(a);
 count 
-------
     1
(1 row)

SELECT count(*) FROM (VALUES (1),(2)) ss(a);
 count 
-------
     2
(1 row)

SELECT count(*) FROM (VALUES (1),(2),(3)) ss(a);
 count 
-------
     3
(1 row)

SELECT count(*) FROM (VALUES (text 'foo'), ('bar'), ('baz')) ss(a);
 count 
-------
     3
(1 row)

SELECT ss.a FROM (VALUES (1),(2),(3)) ss(a) ORDER BY ss.a;
 a 
---
 1
 2
 3
(3 rows)

SELECT ss.a FROM (VALUES (text 'foo'), ('bar'), ('baz')) ss(a) ORDER BY ss.a;
  a  
-----
 bar
 baz
 foo
(3 rows)

-- Test rescan
SET enable_material TO FALSE;
SELECT ss.a, ss2.a FROM (VALUES (1), (2), (3)) ss(a) CROSS JOIN (VALUES (4), (5), (6)) ss2(a) ORDER BY ss.a, ss2.a;
 a | a 
---+---
 1 | 4
 1 | 5
 1 | 6
 2 | 4
 2 | 5
 2 | 6
 3 | 4
 3 | 5
 3 | 6
(9 rows)

SELECT ss.a, ss2.a FROM (VALUES (text 'foo'), ('bar'), ('baz')) ss(a) CROSS JOIN (VALUES (text 'foo'), ('bar'), ('baz')) ss2(a) ORDER BY ss.a, ss2.a;
  a  |  a  
-----+-----
 bar | bar
 bar | baz
 bar | foo
 baz | bar
 baz | baz
 baz | foo
 foo | bar
 foo | baz
 foo | foo
(9 rows)

RESET enable_material;
